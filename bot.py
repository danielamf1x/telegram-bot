import os
import json
import logging
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes, CallbackQueryHandler
)
from flask import Flask
from threading import Thread
import asyncio

# ===== Logging =====
logging.basicConfig(level=logging.INFO)

# ===== Telegram Token =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–µ–∫—Ä–µ—Ç TELEGRAM_TOKEN")

# ===== Google Sheets =====
GOOGLE_SHEET_ID = "1t31GuGFQc-bQpwtlw4cQM6Eynln1r_vbXVo86Yn8k0E"
GOOGLE_JSON = os.getenv("GOOGLE_JSON")
if not GOOGLE_JSON:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–µ–∫—Ä–µ—Ç GOOGLE_JSON")

SERVICE_ACCOUNT_INFO = json.loads(GOOGLE_JSON)
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_dict(SERVICE_ACCOUNT_INFO, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1

# ===== –í–æ–ø—Ä–æ—Å—ã =====
questions = [
    "Manager ID",
    "Manager",
    "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏",
    "–î–∞—Ç–∞ —É—Å–ª—É–≥–∏ (–î–î.MM.–ì–ì)",
    "–¢–∏–ø —É—Å–ª—É–≥–∏",
    "–ê—ç—Ä–æ–ø–æ—Ä—Ç",
    "–¢–µ—Ä–º–∏–Ω–∞–ª",
    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞",
    "–í—Ä–µ–º—è —Ä–µ–π—Å–∞",
    "–ü–∞—Å—Å–∞–∂–∏—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
    "–ù–µ—Ç—Ç–æ",
    "–í–∞–ª—é—Ç–∞ –Ω–µ—Ç—Ç–æ (RUB, USD, EUR)",
    "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É (–î–î.MM.–ì–ì)",
    "–ë—Ä—É—Ç—Ç–æ",
    "–í–∞–ª—é—Ç–∞ –±—Ä—É—Ç—Ç–æ",
    "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º (–î–î.MM.–ì–ì)",
    "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º",
    "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É"
]

ASKING, REVIEW = range(2)
user_data_store = {}

# ===== –í–∞–ª–∏–¥–∞—Ü–∏—è =====
def validate(key, text):
    if text.strip() == "-":
        return True
    if "–î–∞—Ç–∞" in key:
        return bool(re.match(r"^(\d{2}\.\d{2}\.\d{2}|\-)$", text))
    if "–ë—Ä—É—Ç—Ç–æ" in key or "–ù–µ—Ç—Ç–æ" in key:
        return bool(re.match(r"\d+([.,]\d{1,2})?$", text))
    if "–≤–∞–ª—é—Ç–∞" in key.lower():
        return bool(re.match(r"[A-Z]{3}$", text))
    return True

# ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ =====
def check_duplicate_request(request_number: str):
    try:
        values = sheet.col_values(3)  # 3-–π —Å—Ç–æ–ª–±–µ—Ü = "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏"
        if request_number in values:
            prefix, num = request_number.split("-")
            suggested = f"{prefix}-{int(num) + 1}"
            return suggested
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–∞: {e}")
    return None

# ===== Handlers =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_data_store[chat_id] = {"index": 0, "data": {}, "messages": []}

    msg = await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞—è–≤–∫—É.\n{questions[0]} (–µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —Å—Ç–∞–≤—å '-'):")
    user_data_store[chat_id]["messages"].append(msg)

    return ASKING

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text.strip()
    state = user_data_store.get(chat_id)

    if state is None:
        await update.message.reply_text("–ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return ASKING

    idx = state["index"]

    if idx >= len(questions):
        return REVIEW

    key = questions[idx]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if not validate(key, text):
        msg = await update.message.reply_text(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è '{key}'. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:")
        state["messages"].append(msg)
        return ASKING

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –¥–ª—è "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏"
    if key == "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏":
        suggestion = check_duplicate_request(text)
        if suggestion:
            msg = await update.message.reply_text(f"‚ùå –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å! –ü—Ä–µ–¥–ª–∞–≥–∞—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {suggestion}")
            state["messages"].append(msg)
            return ASKING

    state["data"][key] = text
    state["index"] += 1

    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã
    if state["index"] < len(questions):
        msg = await update.message.reply_text(f"{questions[state['index']]} (–µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —Å—Ç–∞–≤—å '-'):")
        state["messages"].append(msg)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        for m in state["messages"]:
            asyncio.create_task(delete_message(update, context, m))
        state["messages"].clear()

        return ASKING

    # ===== –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã =====
    data = state["data"]

    client_template = f"""–ó–∞—è–≤–∫–∞ ‚Ññ {data.get('–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏', '')}
–î–∞—Ç–∞: {data.get('–î–∞—Ç–∞ —É—Å–ª—É–≥–∏ (–î–î.MM.–ì–ì)', '')}
–£—Å–ª—É–≥–∞: {data.get('–¢–∏–ø —É—Å–ª—É–≥–∏', '')}
–ê—ç—Ä–æ–ø–æ—Ä—Ç: {data.get('–ê—ç—Ä–æ–ø–æ—Ä—Ç', '')}
–¢–µ—Ä–º–∏–Ω–∞–ª: {data.get('–¢–µ—Ä–º–∏–Ω–∞–ª', '')}
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data.get('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '')}
–†–µ–π—Å: {data.get('–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞', '')}
–í—Ä–µ–º—è: {data.get('–í—Ä–µ–º—è —Ä–µ–π—Å–∞', '')}
–ü–∞—Å—Å–∞–∂–∏—Ä—ã:
{data.get('–ü–∞—Å—Å–∞–∂–∏—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', '')}

–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data.get('–ë—Ä—É—Ç—Ç–æ', '')} {data.get('–í–∞–ª—é—Ç–∞ –±—Ä—É—Ç—Ç–æ', '')}"""

    await update.message.reply_text(f"üìã –ü—Ä–æ–≤–µ—Ä—å –∑–∞—è–≤–∫—É:\n{client_template}",
                                    reply_markup=InlineKeyboardMarkup([
                                        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
                                        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit")]
                                    ]))

    return REVIEW

async def review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat_id
    state = user_data_store.get(chat_id)
    await query.answer()

    if query.data == "confirm":
        row = [state["data"].get(q, "") for q in questions]
        sheet.append_row(row)
        await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets!")
        del user_data_store[chat_id]
        return ConversationHandler.END

    elif query.data == "edit":
        await query.edit_message_text("‚úèÔ∏è –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
                                      reply_markup=InlineKeyboardMarkup([
                                          [InlineKeyboardButton(q, callback_data=f"edit_{i}")]
                                          for i, q in enumerate(questions)
                                      ]))
        return REVIEW

    elif query.data.startswith("edit_"):
        idx = int(query.data.split("_")[1])
        state["index"] = idx
        await query.edit_message_text(f"–ò–∑–º–µ–Ω–∏ –ø–æ–ª–µ: {questions[idx]} (–µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —Å—Ç–∞–≤—å '-'):")
        return ASKING

# ===== –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ =====
async def list_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        values = sheet.get_all_values()
        if not values or len(values) < 2:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
            return

        last_10 = values[-10:]
        text = "üìë –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
        for row in last_10:
            try:
                text += f"‚Ññ {row[2]} | {row[3]} | {row[4]} | {row[10]}\n"
            except IndexError:
                continue

        await update.message.reply_text(text)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")

# ===== –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π =====
async def delete_message(update: Update, context: ContextTypes.DEFAULT_TYPE, msg):
    try:
        await asyncio.sleep(10)
        await context.bot.delete_message(chat_id=update.message.chat_id, message_id=msg.message_id)
    except:
        pass

# ===== Flask –¥–ª—è Railway (24/7) =====
flask_app = Flask('')

@flask_app.route('/')
def home():
    return "Bot is running"

def run_flask():
    flask_app.run(host='0.0.0.0', port=8080)

Thread(target=run_flask).start()

# ===== –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASKING: [MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message)],
            REVIEW: [CallbackQueryHandler(review)]
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("list", list_requests))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
