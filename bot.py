import os
import re
import json
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes, CallbackQueryHandler
)

# ========= –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
GOOGLE_SHEET_ID = "1t31GuGFQc-bQpwtlw4cQM6Eynln1r_vbXVo86Yn8k0E"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

google_creds_json = os.getenv("GOOGLE_JSON")
if not google_creds_json:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–µ–∫—Ä–µ—Ç GOOGLE_JSON")
creds_dict = json.loads(google_creds_json)

creds = Credentials.from_service_account_info(
    creds_dict,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
client = gspread.authorize(creds)
sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1

# ========= –í–æ–ø—Ä–æ—Å—ã ==========
questions = [
    "Manager ID",
    "Manager",
    "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏",
    "–î–∞—Ç–∞ —É—Å–ª—É–≥–∏ (–î–î.MM.–ì–ì)",
    "–¢–∏–ø —É—Å–ª—É–≥–∏",
    "–ê—ç—Ä–æ–ø–æ—Ä—Ç",
    "–¢–µ—Ä–º–∏–Ω–∞–ª",
    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞",
    "–í—Ä–µ–º—è —Ä–µ–π—Å–∞ (–ß–ß:–ú–ú/–ß–ß:–ú–ú)",
    "–ü–∞—Å—Å–∞–∂–∏—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
    "–ù–µ—Ç—Ç–æ",
    "–í–∞–ª—é—Ç–∞ –Ω–µ—Ç—Ç–æ (RUB, USD, EUR)",
    "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É (–î–î.MM.–ì–ì)",
    "–ë—Ä—É—Ç—Ç–æ",
    "–í–∞–ª—é—Ç–∞ –±—Ä—É—Ç—Ç–æ",
    "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º (–î–î.MM.–ì–ì)",
    "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º",
    "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É"
]

ASKING, CONFIRM = range(2)

# ========= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==========
def get_next_available_number(prefix="–î–Æ-"):
    rows = sheet.get_all_values()[1:]
    numbers = [int(re.search(r"\d+$", r[2]).group()) for r in rows if re.match(rf"{prefix}\d+$", r[2])]
    return f"{prefix}{max(numbers)+1 if numbers else 1}"

def format_input(text):
    return text.strip() if text.strip() else "-"

# ========= Handlers ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["answers"] = {}
    context.user_data["idx"] = 0
    msg = await update.message.reply_text(f"{questions[0]} (–µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —Å—Ç–∞–≤—å '-')")
    context.user_data["last_msg"] = msg
    return ASKING

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = context.user_data["idx"]
    answers = context.user_data["answers"]
    text = format_input(update.message.text)

    # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    try: await context.user_data["last_msg"].delete()
    except: pass
    try: await update.message.delete()
    except: pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
    if questions[idx] == "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏":
        rows = sheet.get_all_values()[1:]
        existing_numbers = [r[2] for r in rows if r]
        if text in existing_numbers:
            text = get_next_available_number()
            msg = await update.message.reply_text(f"‚ö†Ô∏è –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π: {text}")
            context.user_data["last_msg"] = msg

    answers[questions[idx]] = text
    idx += 1

    if idx < len(questions):
        context.user_data["idx"] = idx
        msg = await update.message.reply_text(f"{questions[idx]} (–µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —Å—Ç–∞–≤—å '-')")
        context.user_data["last_msg"] = msg
        return ASKING
    else:
        return await show_summary(update, context)

async def show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data["answers"]

    sms_manager = (
        f"–ó–∞—è–≤–∫–∞ ‚Ññ {data['–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏']}\n"
        f"–î–∞—Ç–∞: {data['–î–∞—Ç–∞ —É—Å–ª—É–≥–∏ (–î–î.MM.–ì–ì)']}\n"
        f"–£—Å–ª—É–≥–∞: {data['–¢–∏–ø —É—Å–ª—É–≥–∏']}\n"
        f"–ê—ç—Ä–æ–ø–æ—Ä—Ç: {data['–ê—ç—Ä–æ–ø–æ—Ä—Ç']}\n"
        f"–¢–µ—Ä–º–∏–Ω–∞–ª: {data['–¢–µ—Ä–º–∏–Ω–∞–ª']}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']}\n"
        f"–†–µ–π—Å: {data['–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞']}\n"
        f"–í—Ä–µ–º—è: {data['–í—Ä–µ–º—è —Ä–µ–π—Å–∞ (–ß–ß:–ú–ú/–ß–ß:–ú–ú)']}\n"
        f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã:\n{data['–ü–∞—Å—Å–∞–∂–∏—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)'].replace(',', '\n')}\n\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data['–ë—Ä—É—Ç—Ç–æ']} {data['–í–∞–ª—é—Ç–∞ –±—Ä—É—Ç—Ç–æ']}"
    )

    sms_table = (
        f"Manager ID: {data['Manager ID']}\n"
        f"Manager: {data['Manager']}\n"
        f"–ó–∞—è–≤–∫–∞ ‚Ññ {data['–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏']}\n"
        f"–î–∞—Ç–∞: {data['–î–∞—Ç–∞ —É—Å–ª—É–≥–∏ (–î–î.MM.–ì–ì)']}\n"
        f"–£—Å–ª—É–≥–∞: {data['–¢–∏–ø —É—Å–ª—É–≥–∏']}\n"
        f"–ê—ç—Ä–æ–ø–æ—Ä—Ç: {data['–ê—ç—Ä–æ–ø–æ—Ä—Ç']}\n"
        f"–¢–µ—Ä–º–∏–Ω–∞–ª: {data['–¢–µ—Ä–º–∏–Ω–∞–ª']}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']}\n"
        f"–†–µ–π—Å: {data['–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞']}\n"
        f"–í—Ä–µ–º—è: {data['–í—Ä–µ–º—è —Ä–µ–π—Å–∞ (–ß–ß:–ú–ú/–ß–ß:–ú–ú)']}\n"
        f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã:\n{data['–ü–∞—Å—Å–∞–∂–∏—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)'].replace(',', '\n')}\n\n"
        f"–ë—Ä—É—Ç—Ç–æ: {data['–ë—Ä—É—Ç—Ç–æ']} {data['–í–∞–ª—é—Ç–∞ –±—Ä—É—Ç—Ç–æ']}\n"
        f"–ù–µ—Ç—Ç–æ: {data['–ù–µ—Ç—Ç–æ']} {data['–í–∞–ª—é—Ç–∞ –Ω–µ—Ç—Ç–æ (RUB, USD, EUR)']}\n\n"
        f"–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º: {data['–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º (–î–î.MM.–ì–ì)']}\n"
        f"–ö—É–¥–∞ –æ–ø–ª–∞—Ç–∏–ª –∫–ª–∏–µ–Ω—Ç: {data['–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º']}\n"
        f"–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É: {data['–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É (–î–î.MM.–ì–ì)']}\n"
        f"–ö–∞–∫ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É: {data['–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É']}"
    )

    context.user_data["sms_manager"] = sms_manager
    context.user_data["sms_table"] = sms_table

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")]
    ]
    msg = await update.message.reply_text(
        f"üì© –°–ú–° –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n{sms_manager}\n\nüì© –°–ú–° –≤ —Ç–∞–±–ª–∏—Ü—É:\n{sms_table}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data["last_msg"] = msg
    return CONFIRM

async def confirm_or_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "confirm":
        row = [context.user_data["answers"].get(q, "-") for q in questions]
        sheet.append_row(row)
        await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        return ConversationHandler.END
    elif query.data == "edit":
        keyboard = [[InlineKeyboardButton(q, callback_data=f"edit_{i}")] for i, q in enumerate(questions)]
        await query.edit_message_text("–ß—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
        return CONFIRM

async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    idx = int(query.data.split("_")[1])
    context.user_data["edit_idx"] = idx
    msg = await query.edit_message_text(f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: {questions[idx]} (–µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —Å—Ç–∞–≤—å '-')")
    context.user_data["last_msg"] = msg
    return ASKING

async def handle_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = context.user_data.get("edit_idx")
    if idx is not None:
        text = format_input(update.message.text)
        context.user_data["answers"][questions[idx]] = text
    return await show_summary(update, context)

# ===== –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞—è–≤–æ–∫ =====
async def list_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = sheet.get_all_values()[1:]
    if not rows:
        await update.message.reply_text("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    keyboard = [[InlineKeyboardButton(f"{r[2]} / {r[1]}", callback_data=f"req_{r[2]}")] for r in rows[-10:]]
    await update.message.reply_text("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

async def show_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    num = query.data.split("_")[1]
    rows = sheet.get_all_values()[1:]
    for r in rows:
        if r[2] == num:
            sms_manager = (
                f"–ó–∞—è–≤–∫–∞ ‚Ññ {r[2]}\n–î–∞—Ç–∞: {r[3]}\n–£—Å–ª—É–≥–∞: {r[4]}\n–ê—ç—Ä–æ–ø–æ—Ä—Ç: {r[5]}\n"
                f"–¢–µ—Ä–º–∏–Ω–∞–ª: {r[6]}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {r[7]}\n–†–µ–π—Å: {r[8]}\n–í—Ä–µ–º—è: {r[9]}\n"
                f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã:\n{r[10].replace(',', '\n')}\n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {r[15]} {r[16]}"
            )
            sms_table = (
                f"Manager ID: {r[0]}\nManager: {r[1]}\n–ó–∞—è–≤–∫–∞ ‚Ññ {r[2]}\n–î–∞—Ç–∞: {r[3]}\n"
                f"–£—Å–ª—É–≥–∞: {r[4]}\n–ê—ç—Ä–æ–ø–æ—Ä—Ç: {r[5]}\n–¢–µ—Ä–º–∏–Ω–∞–ª: {r[6]}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {r[7]}\n"
                f"–†–µ–π—Å: {r[8]}\n–í—Ä–µ–º—è: {r[9]}\n–ü–∞—Å—Å–∞–∂–∏—Ä—ã:\n{r[10].replace(',', '\n')}\n\n"
                f"–ë—Ä—É—Ç—Ç–æ: {r[15]} {r[16]}\n–ù–µ—Ç—Ç–æ: {r[11]} {r[12]}\n"
                f"–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º: {r[17]}\n–ö—É–¥–∞ –æ–ø–ª–∞—Ç–∏–ª –∫–ª–∏–µ–Ω—Ç: {r[18]}\n"
                f"–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É: {r[13]}\n–ö–∞–∫ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É: {r[19]}"
            )
            await query.edit_message_text(f"üì© –°–ú–° –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n{sms_manager}\n\nüì© –°–ú–° –≤ —Ç–∞–±–ª–∏—Ü—É:\n{sms_table}")
            return

# ========= –û—Å–Ω–æ–≤–Ω–æ–µ ==========
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASKING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit)
            ],
            CONFIRM: [
                CallbackQueryHandler(confirm_or_edit, pattern="^(confirm|edit)$"),
                CallbackQueryHandler(edit_field, pattern="^edit_\\d+$")
            ]
        },
        fallbacks=[CommandHandler("start", start)],
        per_message=True
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("list", list_requests))
    app.add_handler(CallbackQueryHandler(show_request, pattern="^req_"))
    app.run_polling()

if __name__ == "__main__":
    main()
