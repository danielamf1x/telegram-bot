import os
import re
import json
import gspread
from google.oauth2.service_account import Credentials
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes, CallbackQueryHandler
)

# ========= –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
GOOGLE_SHEET_ID = "1t31GuGFQc-bQpwtlw4cQM6Eynln1r_vbXVo86Yn8k0E"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –∫–ª—é—á –∏–∑ Secrets
google_creds_json = os.getenv("GOOGLE_JSON")
if not google_creds_json:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–µ–∫—Ä–µ—Ç GOOGLE_JSON")
creds_dict = json.loads(google_creds_json)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
creds = Credentials.from_service_account_info(
    creds_dict,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
client = gspread.authorize(creds)
sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1

# ========= –í–æ–ø—Ä–æ—Å—ã ==========
questions = [
    "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏",
    "Manager",
    "–ö–ª–∏–µ–Ω—Ç",
    "–£—Å–ª—É–≥–∞",
    "–ü–∞—Å—Å–∞–∂–∏—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
    "–ù–µ—Ç—Ç–æ",
    "–í–∞–ª—é—Ç–∞ –Ω–µ—Ç—Ç–æ",
    "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É (–î–î.MM.–ì–ì)",
    "–ö–æ–º–∏—Å—Å–∏—è",
    "–í–∞–ª—é—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏",
    "–ú–∞—Ä–∂–∞",
    "–í–∞–ª—é—Ç–∞ –º–∞—Ä–∂–∏",
    "–ò—Ç–æ–≥–æ",
    "–í–∞–ª—é—Ç–∞ –∏—Ç–æ–≥–æ",
    "–î–∞—Ç–∞ —É—Å–ª—É–≥–∏ (–î–î.MM.–ì–ì)",
    "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ (–î–î.MM.–ì–ì)"
]

ASKING, CONFIRM = range(2)

# ========= –§—É–Ω–∫—Ü–∏–∏ ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["answers"] = {}
    context.user_data["idx"] = 0
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞—è–≤–∫—É.\n\n{questions[0]} (–µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —Å—Ç–∞–≤—å '-')"
    )
    return ASKING

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = context.user_data.get("idx", 0)
    answers = context.user_data.get("answers", {})
    text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
    if questions[idx] == "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏":
        existing_numbers = [row[0] for row in sheet.get_all_values()[1:] if row]
        if text in existing_numbers:
            match = re.match(r"([^\d]*)(\d+)$", text)
            if match:
                prefix, num = match.groups()
                suggested = f"{prefix}{int(num) + 1}"
                await update.message.reply_text(
                    f"‚ö†Ô∏è –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ!\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π: {suggested}"
                )
                text = suggested

    answers[questions[idx]] = text
    idx += 1

    if idx < len(questions):
        context.user_data["idx"] = idx
        await update.message.reply_text(
            f"{questions[idx]} (–µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —Å—Ç–∞–≤—å '-')"
        )
        return ASKING
    else:
        return await show_summary(update, context)

async def show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data["answers"]

    sms_manager = (
        f"–ó–∞—è–≤–∫–∞ {data['–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏']} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {data['–ö–ª–∏–µ–Ω—Ç']} "
        f"—É—Å–ª—É–≥–∞ {data['–£—Å–ª—É–≥–∞']} –¥–∞—Ç–∞ {data['–î–∞—Ç–∞ —É—Å–ª—É–≥–∏ (–î–î.MM.–ì–ì)']}."
    )

    sms_table = (
        f"–ó–∞—è–≤–∫–∞ {data['–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏']}, –º–µ–Ω–µ–¥–∂–µ—Ä {data['Manager']}, "
        f"–ø–∞—Å—Å–∞–∂–∏—Ä—ã: {data['–ü–∞—Å—Å–∞–∂–∏—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)']}, "
        f"–Ω–µ—Ç—Ç–æ {data['–ù–µ—Ç—Ç–æ']} {data['–í–∞–ª—é—Ç–∞ –Ω–µ—Ç—Ç–æ']}, "
        f"–∫–æ–º–∏—Å—Å–∏—è {data['–ö–æ–º–∏—Å—Å–∏—è']} {data['–í–∞–ª—é—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏']}, "
        f"–º–∞—Ä–∂–∞ {data['–ú–∞—Ä–∂–∞']} {data['–í–∞–ª—é—Ç–∞ –º–∞—Ä–∂–∏']}, "
        f"–∏—Ç–æ–≥–æ {data['–ò—Ç–æ–≥–æ']} {data['–í–∞–ª—é—Ç–∞ –∏—Ç–æ–≥–æ']}, "
        f"–¥–∞—Ç–∞ —É—Å–ª—É–≥–∏ {data['–î–∞—Ç–∞ —É—Å–ª—É–≥–∏ (–î–î.MM.–ì–ì)']}, "
        f"–æ–ø–ª–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ {data['–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ (–î–î.MM.–ì–ì)']}, "
        f"–æ–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É {data['–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É (–î–î.MM.–ì–ì)']}."
    )

    context.user_data["sms_manager"] = sms_manager
    context.user_data["sms_table"] = sms_table

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")]
    ]
    await update.message.reply_text(
        f"üì© –°–ú–° –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n{sms_manager}\n\nüì© –°–ú–° –≤ —Ç–∞–±–ª–∏—Ü—É:\n{sms_table}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM

async def confirm_or_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "confirm":
        data = context.user_data["answers"]
        row = [data[q] for q in questions]
        sheet.append_row(row)
        await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        return ConversationHandler.END

    elif query.data == "edit":
        keyboard = [
            [InlineKeyboardButton(q, callback_data=f"edit_{i}")]
            for i, q in enumerate(questions)
        ]
        await query.edit_message_text(
            "–ß—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIRM

async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    idx = int(query.data.split("_")[1])
    context.user_data["edit_idx"] = idx
    await query.edit_message_text(f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: {questions[idx]}")
    return ASKING

async def handle_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = context.user_data.get("edit_idx")
    if idx is not None:
        context.user_data["answers"][questions[idx]] = update.message.text.strip()
    return await show_summary(update, context)

# ===== –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞—è–≤–æ–∫ =====
async def list_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = sheet.get_all_values()[1:]
    if not rows:
        await update.message.reply_text("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    keyboard = []
    for r in rows[-10:]:
        num, mgr, *_ , date = r[0], r[1], *r[2:], r[14]
        keyboard.append([InlineKeyboardButton(f"{num} / {mgr} / {date}", callback_data=f"req_{num}")])

    await update.message.reply_text(
        "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    num = query.data.split("_", 1)[1]
    rows = sheet.get_all_values()[1:]
    for r in rows:
        if r[0] == num:
            sms_manager = (
                f"–ó–∞—è–≤–∫–∞ {r[0]} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {r[2]} —É—Å–ª—É–≥–∞ {r[3]} –¥–∞—Ç–∞ {r[14]}."
            )
            sms_table = (
                f"–ó–∞—è–≤–∫–∞ {r[0]}, –º–µ–Ω–µ–¥–∂–µ—Ä {r[1]}, –ø–∞—Å—Å–∞–∂–∏—Ä—ã: {r[4]}, "
                f"–Ω–µ—Ç—Ç–æ {r[5]} {r[6]}, –∫–æ–º–∏—Å—Å–∏—è {r[8]} {r[9]}, "
                f"–º–∞—Ä–∂–∞ {r[10]} {r[11]}, –∏—Ç–æ–≥–æ {r[12]} {r[13]}, "
                f"–¥–∞—Ç–∞ —É—Å–ª—É–≥–∏ {r[14]}, –æ–ø–ª–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ {r[15]}, "
                f"–æ–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É {r[7]}."
            )
            await query.edit_message_text(
                f"üì© –°–ú–° –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n{sms_manager}\n\nüì© –°–ú–° –≤ —Ç–∞–±–ª–∏—Ü—É:\n{sms_table}"
            )
            return

# ========= –û—Å–Ω–æ–≤–Ω–æ–µ ==========
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASKING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit)
            ],
            CONFIRM: [
                CallbackQueryHandler(confirm_or_edit, pattern="^(confirm|edit)$"),
                CallbackQueryHandler(edit_field, pattern="^edit_\\d+$")
            ]
        },
        fallbacks=[CommandHandler("start", start)],
        per_message=True  # üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("list", list_requests))
    app.add_handler(CallbackQueryHandler(show_request, pattern="^req_"))

    app.run_polling()

if __name__ == "__main__":
    main()
