import os
import re
import json
import gspread
from google.oauth2.service_account import Credentials
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, Message
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes, CallbackQueryHandler
)

# ========= –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
GOOGLE_SHEET_ID = "1t31GuGFQc-bQpwtlw4cQM6Eynln1r_vbXVo86Yn8k0E"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

google_creds_json = os.getenv("GOOGLE_JSON")
if not google_creds_json:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Å–µ–∫—Ä–µ—Ç GOOGLE_JSON")
creds_dict = json.loads(google_creds_json)

creds = Credentials.from_service_account_info(
    creds_dict,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
client = gspread.authorize(creds)
sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1

# ========= –í–æ–ø—Ä–æ—Å—ã ==========
questions = [
    "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏",
    "Manager ID",
    "Manager",
    "–î–∞—Ç–∞ (–î–î.MM.–ì–ì)",
    "–£—Å–ª—É–≥–∞",
    "–ê—ç—Ä–æ–ø–æ—Ä—Ç",
    "–¢–µ—Ä–º–∏–Ω–∞–ª",
    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
    "–†–µ–π—Å",
    "–í—Ä–µ–º—è (—á—á:–º–º)",
    "–ü–∞—Å—Å–∞–∂–∏—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
    "–ë—Ä—É—Ç—Ç–æ",
    "–í–∞–ª—é—Ç–∞ –±—Ä—É—Ç—Ç–æ",
    "–ù–µ—Ç—Ç–æ",
    "–í–∞–ª—é—Ç–∞ –Ω–µ—Ç—Ç–æ",
    "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º (–î–î.MM.–ì–ì)",
    "–ö—É–¥–∞ –æ–ø–ª–∞—Ç–∏–ª –∫–ª–∏–µ–Ω—Ç",
    "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É (–î–î.MM.–ì–ì)",
    "–ö–∞–∫ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É",
]

ASKING, CONFIRM, EDITING = range(3)


# ========= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ==========
def find_next_number(current: str, existing: list[str]) -> str:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏"""
    match = re.match(r"([^\d]*)(\d+)$", current)
    if match:
        prefix, num = match.groups()
        next_num = int(num)
        while f"{prefix}{next_num}" in existing:
            next_num += 1
        return f"{prefix}{next_num}"
    return current


def format_sms_manager(data: dict) -> str:
    return (
        f"–ó–∞—è–≤–∫–∞ ‚Ññ {data['–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏']}\n"
        f"–î–∞—Ç–∞: {data['–î–∞—Ç–∞ (–î–î.MM.–ì–ì)']}\n"
        f"–£—Å–ª—É–≥–∞: {data['–£—Å–ª—É–≥–∞']}\n"
        f"–ê—ç—Ä–æ–ø–æ—Ä—Ç: {data['–ê—ç—Ä–æ–ø–æ—Ä—Ç']}\n"
        f"–¢–µ—Ä–º–∏–Ω–∞–ª: {data['–¢–µ—Ä–º–∏–Ω–∞–ª']}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']}\n"
        f"–†–µ–π—Å: {data['–†–µ–π—Å']}\n"
        f"–í—Ä–µ–º—è: {data['–í—Ä–µ–º—è (—á—á:–º–º)']}\n"
        f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã:\n" + "\n".join(data['–ü–∞—Å—Å–∞–∂–∏—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)'].split(",")) + "\n\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data['–ù–µ—Ç—Ç–æ']} {data['–í–∞–ª—é—Ç–∞ –Ω–µ—Ç—Ç–æ']}"
    )


def format_sms_table(data: dict) -> str:
    return (
        f"Manager ID: {data['Manager ID']}\n"
        f"Manager: {data['Manager']}\n"
        f"–ó–∞—è–≤–∫–∞ ‚Ññ {data['–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏']}\n"
        f"–î–∞—Ç–∞: {data['–î–∞—Ç–∞ (–î–î.MM.–ì–ì)']}\n"
        f"–£—Å–ª—É–≥–∞: {data['–£—Å–ª—É–≥–∞']}\n"
        f"–ê—ç—Ä–æ–ø–æ—Ä—Ç: {data['–ê—ç—Ä–æ–ø–æ—Ä—Ç']}\n"
        f"–¢–µ—Ä–º–∏–Ω–∞–ª: {data['–¢–µ—Ä–º–∏–Ω–∞–ª']}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']}\n"
        f"–†–µ–π—Å: {data['–†–µ–π—Å']}\n"
        f"–í—Ä–µ–º—è: {data['–í—Ä–µ–º—è (—á—á:–º–º)']}\n"
        f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã:\n" + "\n".join(data['–ü–∞—Å—Å–∞–∂–∏—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)'].split(",")) + "\n"
        f"–ë—Ä—É—Ç—Ç–æ: {data['–ë—Ä—É—Ç—Ç–æ']} {data['–í–∞–ª—é—Ç–∞ –±—Ä—É—Ç—Ç–æ']}\n"
        f"–ù–µ—Ç—Ç–æ: {data['–ù–µ—Ç—Ç–æ']} {data['–í–∞–ª—é—Ç–∞ –Ω–µ—Ç—Ç–æ']}\n"
        f"–î–∞—Ç—ã –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º: {data['–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–º (–î–î.MM.–ì–ì)']}\n"
        f"–ö—É–¥–∞ –æ–ø–ª–∞—Ç–∏–ª –∫–ª–∏–µ–Ω—Ç: {data['–ö—É–¥–∞ –æ–ø–ª–∞—Ç–∏–ª –∫–ª–∏–µ–Ω—Ç']}\n"
        f"–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É: {data['–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É (–î–î.MM.–ì–ì)']}\n"
        f"–ö–∞–∫ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É: {data['–ö–∞–∫ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É']}"
    )


async def cleanup_messages(context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã/–æ—Ç–≤–µ—Ç—ã"""
    for msg in context.user_data.get("to_delete", []):
        try:
            await msg.delete()
        except Exception:
            pass
    context.user_data["to_delete"] = []


# ========= –õ–æ–≥–∏–∫–∞ ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["answers"] = {}
    context.user_data["idx"] = 0
    context.user_data["to_delete"] = []

    m = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"{questions[0]} (–µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —Å—Ç–∞–≤—å '-')"
    )
    context.user_data["to_delete"].append(m)
    return ASKING


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = context.user_data["idx"]
    answers = context.user_data["answers"]
    text = update.message.text.strip()

    context.user_data.setdefault("to_delete", []).append(update.message)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞
    if questions[idx] == "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏":
        existing_numbers = [row[0] for row in sheet.get_all_values()[1:] if row]
        if text in existing_numbers:
            suggested = find_next_number(text, existing_numbers)
            text = suggested
            m = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚ö†Ô∏è –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å! –ü—Ä–µ–¥–ª–∞–≥–∞—é: {suggested}"
            )
            context.user_data["to_delete"].append(m)

    answers[questions[idx]] = text

    idx += 1
    if idx < len(questions):
        context.user_data["idx"] = idx
        m = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"{questions[idx]} (–µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, —Å—Ç–∞–≤—å '-')"
        )
        context.user_data["to_delete"].append(m)
        return ASKING
    else:
        return await show_summary(update, context)


async def show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_messages(context)
    data = context.user_data["answers"]

    sms_manager = format_sms_manager(data)
    sms_table = format_sms_table(data)
    context.user_data["sms_manager"] = sms_manager
    context.user_data["sms_table"] = sms_table

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")]
    ]
    m = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"üì© –°–ú–° –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n{sms_manager}\n\nüì© –°–ú–° –≤ —Ç–∞–±–ª–∏—Ü—É:\n{sms_table}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data["summary_msg"] = m
    return CONFIRM


async def confirm_or_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "confirm":
        data = context.user_data["answers"]
        row = [data.get(q, "-") for q in questions]
        sheet.append_row(row)

        await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        return ConversationHandler.END

    elif query.data == "edit":
        keyboard = [
            [InlineKeyboardButton(q, callback_data=f"edit_{i}")]
            for i, q in enumerate(questions)
        ]
        await query.edit_message_text(
            "–ß—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return EDITING


async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = int(query.data.split("_")[1])
    context.user_data["edit_idx"] = idx

    m = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: {questions[idx]}"
    )
    context.user_data["to_delete"].append(m)
    return ASKING


async def handle_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idx = context.user_data.get("edit_idx")
    if idx is None:
        return ASKING

    context.user_data["answers"][questions[idx]] = update.message.text.strip()
    context.user_data["to_delete"].append(update.message)
    context.user_data.pop("edit_idx", None)

    return await show_summary(update, context)


# === /list ===
async def list_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = sheet.get_all_values()[1:]
    if not rows:
        await update.message.reply_text("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    keyboard = []
    for r in rows[-10:]:
        num, mgr = r[0], r[2]
        keyboard.append([InlineKeyboardButton(f"{num} / {mgr}", callback_data=f"req_{num}")])

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    num = query.data.split("_", 1)[1]
    rows = sheet.get_all_values()[1:]
    for r in rows:
        if r[0] == num:
            data = dict(zip(questions, r))
            sms_manager = format_sms_manager(data)
            sms_table = format_sms_table(data)
            await query.edit_message_text(
                f"üì© –°–ú–° –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n{sms_manager}\n\nüì© –°–ú–° –≤ —Ç–∞–±–ª–∏—Ü—É:\n{sms_table}"
            )
            return


# ========= –û—Å–Ω–æ–≤–Ω–æ–µ ==========
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASKING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit),
            ],
            CONFIRM: [
                CallbackQueryHandler(confirm_or_edit, pattern="^(confirm|edit)$"),
            ],
            EDITING: [
                CallbackQueryHandler(edit_field, pattern="^edit_\\d+$")
            ],
        },
        fallbacks=[CommandHandler("start", start)],
        per_message=False,
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("list", list_requests))
    app.add_handler(CallbackQueryHandler(show_request, pattern="^req_"))

    app.run_polling()


if __name__ == "__main__":
    main()
